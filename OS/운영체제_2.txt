1. 컨텍스트 스위칭
    CPU/코어에서 실행 중이던 프로세스/스레드가 다른 프로세스/스레드로 교체되는 것

    ** 컨텍스트 (context) : 프로세스/스레드의 상태, CPU, 메모리 등등

    컨텍스트 스위칭이 필요한 이유 : 여러 프로세스/스레드를 동시에 실행시키기 위해 

    발생하는 시기 : 주어진 time slice(quantum)을 다 사용했거나, IO작업을 해야하거나, 다른 리소스를 기다려야 하거나,,,,,
                   아주 짧은 시간동안 프로세스들이 반복적으로 CPU를 이용하는 것

2. 컨텍스트 스위칭은 누구에 의해 실행되나?
    OS커널에 의해 : 운영체제의 하부, 각종 리소스를 관리/감독하는 역할


3. 컨텍스트 스위칭은 어떤 과정으로 발생하는 가?
    종류 1 : 다른 프로세스끼리 스위칭 (Process Context switching)
             -> 조금 더 빠름 : 메모리 주소 관련 처리는 하지 않기 때문
    종류 2 : 같은 프로세스의 스레드끼리 스위칭 (Context switching)
    공통점 :  1. 커널모드에서 실행
              2. CPU의 레지스터 상태를 교체
                - 레지스터에는 여러 값들이 교체되면서 실행
                  다른 프로세스가 실행되면, 이전 레지스터의 값 상태를 저장하고 다른 프로세스를 실행

    차이점 : 1. 프로세스 컨텍스트 스위칭은 가상 메모리 주소 관련 처리를 추가로 수행
                - MMU 교체 필요 (새로운 프로세스의 주소체계를 바라볼 수 있도록 해줘야함), TLB Clear 필요
    ** MMU : 메모리 매니지 유닛
    ** TLB : 가상 메모리 주소와, 실제 물리적인 메모리 주소의 매핑정보를 들고 있는 캐쉬역할 
    ** 캐시 오혐 : 자주 쓸것 같은 것은 캐시에 올려놓는데, 컨텍스트 스위칭이 발생하면 이전 캐시 내용이 있기 때문에 캐시가 오염되었다고 함

    유저 입장에서는 컨텍스트 스위칭이 많이 발생하는 것은 오버헤드이기 때문에 많이 발생하는 것은 좋지 않다. (CPU를 계속 잡아 먹고 있기때문에)



BY 쉬운 코드

     