
하나의 프로세스/스레드만 진입해서 실행
    -> Mutual exclusion 
       Mutual exclusion 를 보장하는 방법 (lock)

    do {
        acquire lock    
            critical section
        release lock
            remainder section
    } while (TURE)

    TestAndSet -> CPU atomic 명령어

    atomic 명령어의 특징 
        - 실행 중간에 간섭받거나 중단되지 않음
        - 같은 메모리 영역에 대해 동시에 실행되지 않음

스핀락 (spinlock)
    - 락을 가질 수 있을 때 까지 반복해서 시도

    단점 : 락을 기다리는 동안 CPU를 계속 확인하게 되므로 CPU를 낭비하게 됨
    해결책 ->> 락이 준비되면 알려줘

뮤텍스 (mutex)
    락을 가질 수 있을 때까지 휴식 (휴식 -> 깸 -> 휴식 : 이 사이에 컨텍스트 스위칭 발생)

    ?? 그렇다면 뮤텍스가 스핀락보다 항상 좋은 걸까? 
    --> 절대적이지 않다.
        멀티 코어 환경이고, critical section에서의 작업이 컨텍스트 스위칭보다 더 빨리 끝난다면
        스핀락이 뮤텍스보다 더 이점이 있다.

세마포 (semaphore)
    signal mechanism 을 가진, 하나 이상의 프로세스/스레드가 critical section에 접근 가능하도록 하는 장치
    -- 순서를 정해줄때도 사용가능 함
    -- signal() - wait()
    
뮤텍스와 이진(binary) 세마포는 같은것인가?
    뮤텍스 : 락을 스레드만 락을 해제 할 수 있음
    세마포 : wait를 날리는 스레드와 signal을 호출하는 스레드는 다를 수 있음

    뮤텍스 : priority inheritance (우선순위를 스케줄링 하는 방식 중 한가지) 속성을 가짐
    세마포 : 위 속성이 없음 (누가 wait을 할지, signal을 할지 알 수 없기때문)

    ** 상호배제만 필요하다면 뮤텍스
        작업간의 실행순서 동기화가 필요하다면 세마포가 권장됨
        OS와 프로그래밍 언어마다 차이가 있을 수 있음

        



